<div class="container">
	<div class="page-header">
		<h1 class="page-title">Your Profile</h1>
		<p class="page-subtitle">Manage your account, set new password, update profile image</p>
	</div>

	<div class="cards cards-3">

		<div class="card">
			<h2>
				<div class="card-icon">
					<i class="fas fa-image-portrait"></i>
				</div>
				Profile Image
			</h2>
			<form id="imageUploadForm" enctype="multipart/form-data">
				<div class="card-body">
					<div class="profile-image">
						<% if (user && user.profile_image) { %>
						<img src="<%= user.profile_image %>" alt="Profile Image" id="profileImagePreview">
						<% } else { %>
                    <div class="no-image">
							<i class="fas fa-user-circle"></i>
							<p>No profile image</p>
						</div>
						<% } %>
					</div>
					<div class="form-group">
						<label>Choose a new profile image</label>
						<input type="file" id="profileImage" accept="image/*" class="form-control"></input>
					</div>
				</div>
				<div class="card-footer">
					<div class="button-group">
						<button form="imageUploadForm" type="submit" class="btn btn-primary" style="min-width: 216px;">
							<i class="fas fa-upload"></i> Upload Image
						</button>
					</div>
				</div>
			</form>
		</div>
		
		<div class="card">
			<h2>
				<div class="card-icon"><i class="fas fa-user-circle"></i></div>
				Account
			</h2>
			<div class="card-body">
				<div class="form-group">
					<label for="name">Name</label>
					<div class="input-group">
						<input type="text" id="name" name="name" class="form-control" autocomplete="name" required="" value="<%= user.name %>" readonly>
					</div>
				</div>

				<div class="form-group">
					<label for="username">Username</label>
					<div class="input-group">
						<input type="text" id="username" name="username" class="form-control" autocomplete="username" required="" value="<%= user.username %>" readonly>
					</div>
				</div>

				<div class="form-group">
					<label for="email">Email</label>
					<div class="input-group">
						<input type="text" id="email" name="email" class="form-control" autocomplete="email" required="" value="<%= user.email %>" readonly>
					</div>
				</div>

				<div class="card-info-2c">
				    
				    <div class="card-info-group">
					    <label>Role</label>
					    <p>
						    <%
                  if (user.roles && user.roles.length > 0) {
						    user.roles.forEach(role => {
						    %>
						    <span class="role-badge role-badge-<%= role %>"><%= role.charAt(0).toUpperCase() + role.slice(1) %></span>
						    <%
                    });
						    } else {
						    user.role = 'guest'; // Default role if none is assigned
						    }
						    %>
					    </p>
				    </div>
				</div>
			</div>
		</div>


		<div class="card">
			<h2>
				<div class="card-icon"><i class="fas fa-key"></i></div>
				Password
			</h2>
			<form method="post" id="passwordForm" onsumbit="updatePassword(event, this)">
			    <div class="card-body">
					<div class="alert" id="messagebox" style="display: none;"></div>
				    <div class="form-group">
					    <label for="currentPassword">Current Password</label>
					    <div class="password-input-group">
						    <input type="password" id="currentPassword" name="currentpassword" class="form-control" autocomplete="current-password" required="">
						    <button type="button" class="password-toggle" data-target="currentPassword">
							    <i class="fas fa-eye"></i>
						    </button>
					    </div>
				    </div>
				    <div class="form-group">
					    <label for="newPassword">New Password</label>
					    <div class="password-input-group">
						    <input type="password" id="newPassword" name="newpassword" class="form-control" autocomplete="new-password" required="">
						    <button type="button" class="password-toggle" data-target="newPassword">
							    <i class="fas fa-eye"></i>
						    </button>
					    </div>
				    </div>

				    <div class="form-group">
					    <label for="confirmPassword">Confirm Password</label>
					    <div class="password-input-group">
						    <input type="password" id="confirmPassword" name="confirmpassword" class="form-control" autocomplete="confirm-password" required="">
						    <button type="button" class="password-toggle" data-target="confirmPassword">
							    <i class="fas fa-eye"></i>
						    </button>
					    </div>
				    </div>
			    </div>
			    <div class="card-footer">
				    <div class="button-group">
					    <button type="submit" class="btn btn-primary">
						    <i class="fas fa-save"></i> Update Password
					    </button>
				    </div>
			    </div>
			</form>
		</div>

	</div>
	
	
	
	
	
</div>

<script>
	
document.addEventListener('DOMContentLoaded', function() {
  const passwordForm = document.getElementById('passwordForm');
  const passwordToggles = document.querySelectorAll('.password-toggle');

  // Password toggle functionality
  passwordToggles.forEach(toggle => {
    toggle.addEventListener('click', function() {
      const targetId = this.getAttribute('data-target');
      const passwordField = document.getElementById(targetId);

      if (passwordField) {
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);

        // Toggle the eye icon
        this.querySelector('i').classList.toggle('fa-eye');
        this.querySelector('i').classList.toggle('fa-eye-slash');
      }
    });
  });

  // Form submission
  if (passwordForm) {
    passwordForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Remove any existing alerts
      const existingAlerts = passwordForm.querySelectorAll('.alert');
      existingAlerts.forEach(alert => alert.remove());

      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;

      // Basic client-side validation with better feedback
      if (newPassword !== confirmPassword) {
        // Create a more user-friendly alert
        const alertElement = document.createElement('div');
        alertElement.className = 'alert alert-danger';
        alertElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> New passwords do not match!';

        // Insert at the top of the form
        passwordForm.insertBefore(alertElement, passwordForm.firstChild);

        // Remove after 5 seconds
        setTimeout(() => {
          alertElement.remove();
        }, 5000);
        return;
      }

      // Show loading state
      const submitButton = passwordForm.querySelector('button[type="submit"]');
      const originalButtonText = submitButton.innerHTML;
      submitButton.disabled = true;
      submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

      try {
        // Get token from localStorage or from the session cookie
        let token = localStorage.getItem('token');
        
        // If no token in localStorage, we'll proceed without it
        if (!token) {
          console.log('No token found in localStorage, proceeding with session-based authentication');
        }

        // Send request to change password
        const response = await fetch('/account/change-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            currentPassword,
            newPassword
          })
        });

        const result = await response.json();

        if (response.ok) {
          // Success feedback
          const successElement = document.createElement('div');
          successElement.className = 'alert alert-success';
          successElement.innerHTML = `<i class="fas fa-check-circle"></i> ${result.message || 'Password updated successfully!'}`;

          // Insert at the top of the form
          passwordForm.insertBefore(successElement, passwordForm.firstChild);

          // Clear the form
          passwordForm.reset();
        } else {
          // Error feedback
          const errorElement = document.createElement('div');
          errorElement.className = 'alert alert-danger';
          errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${result.message || 'Failed to update password. Please try again.'}`;

          // Insert at the top of the form
          passwordForm.insertBefore(errorElement, passwordForm.firstChild);
        }
      } catch (error) {
        console.error('Error updating password:', error);

        // Error feedback
        const errorElement = document.createElement('div');
        errorElement.className = 'alert alert-danger';
        errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${error.message || 'An unexpected error occurred. Please try again.'}`;

        // Insert at the top of the form
        passwordForm.insertBefore(errorElement, passwordForm.firstChild);
      } finally {
        // Restore button state
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonText;

        // Remove alerts after 5 seconds
        setTimeout(() => {
          const alerts = passwordForm.querySelectorAll('.alert');
          alerts.forEach(alert => {
            alert.classList.add('fade-out');
            setTimeout(() => alert.remove(), 300);
          });
        }, 5000);
      }
    });
  }
});
// upload profile image
document.addEventListener('DOMContentLoaded', function() {
  const imageUploadForm = document.getElementById('imageUploadForm');
  const profileImageInput = document.getElementById('profileImage');
  const profileImagePreview = document.getElementById('profileImagePreview');

  // Preview image before upload
  if (profileImageInput) {
    profileImageInput.addEventListener('change', function() {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          // Create preview if it doesn't exist
          if (!profileImagePreview) {
            const previewContainer = document.querySelector('.current-image');
            previewContainer.innerHTML = '';
            const newPreview = document.createElement('img');
            newPreview.id = 'profileImagePreview';
            newPreview.alt = 'Profile Image Preview';
            previewContainer.appendChild(newPreview);
            newPreview.src = e.target.result;
          } else {
            profileImagePreview.src = e.target.result;
          }
        };
        reader.readAsDataURL(file);
      }
    });
  }

  // Handle form submission
  if (imageUploadForm) {
    imageUploadForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Remove any existing alerts
      const existingAlerts = imageUploadForm.querySelectorAll('.alert');
      existingAlerts.forEach(alert => alert.remove());

      // Check if a file was selected
      if (!profileImageInput.files || !profileImageInput.files[0]) {
        const alertElement = document.createElement('div');
        alertElement.className = 'alert alert-danger';
        alertElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> Please select an image file.';
        imageUploadForm.insertBefore(alertElement, imageUploadForm.firstChild);
        return;
      }

      // Show loading state
	  console.log(imageUploadForm);
      const submitButton = imageUploadForm.querySelector('button[type="submit"]');
      const originalButtonText = submitButton.innerHTML;
      submitButton.disabled = true;
      submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';

      try {
        // Create FormData object
        const formData = new FormData();
        formData.append('profileImage', profileImageInput.files[0]);

        // Send request to upload profile image
        const response = await fetch('/account/upload-image', {
          method: 'POST',
          body: formData,
          credentials: 'include' // Include credentials to send cookies
        });

        // Check if the response is JSON before parsing
        const contentType = response.headers.get('content-type');
        let result;
        if (contentType && contentType.includes('application/json')) {
          result = await response.json();
        } else {
          // If not JSON, get the text and create a custom error object
          const text = await response.text();
          console.error('Non-JSON response:', text);
          result = { 
            success: false, 
            message: 'Server returned non-JSON response. You may need to log in again.' 
          };
        }

        if (response.ok && result.success) {
          // Success feedback
          const successElement = document.createElement('div');
          successElement.className = 'alert alert-success';
          successElement.innerHTML = `<i class="fas fa-check-circle"></i> ${result.message || 'Profile image updated successfully!'}`;
          imageUploadForm.insertBefore(successElement, imageUploadForm.firstChild);

          // Update the image if it was returned
          if (result.imageUrl) {
            // If there's no preview element yet, create one
            const previewContainer = document.querySelector('.current-image');
            if (previewContainer.querySelector('.no-image')) {
              previewContainer.innerHTML = '';
              const newImg = document.createElement('img');
              newImg.id = 'profileImagePreview';
              newImg.alt = 'Profile Image';
              // Add cache-busting parameter to prevent browser caching
              newImg.src = `${result.imageUrl}?t=${new Date().getTime()}`;
              previewContainer.appendChild(newImg);
            } else if (profileImagePreview) {
              // Add cache-busting parameter to prevent browser caching
              profileImagePreview.src = `${result.imageUrl}?t=${new Date().getTime()}`;
            }
            
            // Reload the page after 1 second to ensure the session is updated
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          }
        } else {
          // Error feedback
          const errorElement = document.createElement('div');
          errorElement.className = 'alert alert-danger';
          errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${result.message || 'Failed to upload image. Please try again.'}`;
          imageUploadForm.insertBefore(errorElement, imageUploadForm.firstChild);
        }
      } catch (error) {
        console.error('Error uploading profile image:', error);

        // Error feedback
        const errorElement = document.createElement('div');
        errorElement.className = 'alert alert-danger';
        errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${error.message || 'An unexpected error occurred. Please try again.'}`;
        imageUploadForm.insertBefore(errorElement, imageUploadForm.firstChild);
      } finally {
        // Restore button state
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonText;

        // Remove alerts after 5 seconds
        setTimeout(() => {
          const alerts = imageUploadForm.querySelectorAll('.alert');
          alerts.forEach(alert => {
            alert.classList.add('fade-out');
            setTimeout(() => alert.remove(), 300);
          });
        }, 5000);
      }
    });
  }
});
</script>
